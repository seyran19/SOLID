S - single responsibility - принцип единственной ответственности. Каждый класс долженотвечать
    только за однк операци. Другими словами, у нас должна быть лишь одна причина чтобы поменять
    класс.

O - open-closed - принцип открытости и закрытости. Класс открыт на расширение и закрыт на
    модификацию.
    Пример:
    есть класс Coffee у которого есть метод makeLatte, мы не можем поменять этот метод чтобы
    он делал вместо latte americano, вместо этого следует в класс добавить метод
    makeAmericano.

L - Liscov substitution - принцип подстановки Барбары Лисков.
    Функционал наследника должен быть таким же как и функционал родителя, и мы должны иметь
    возможность в коде заменить наследника родителем или наоборот, при этом не сломав код.
    Пример:
    если родитель умеет делать latte, то и наследник должен уметь.

I - Interface segregation - принцип разделения интерфейсов.
    Пример:
    есть интерфейс ПЕРЕДВИГАЮЩИЕСЯ, и у него есть методы fly, swim, walk.
    И теперь если условный класс СОБАКА имплементит этот интерфейс у нее будет метод fly.
    стоит разделить интерфейсы на Flyable, swimmable, walkable.

D - dependency inversion - принцип внедрения зависимостей.
    Модули высокого уровня не должны зависеть от модулей нижнего уровня.
    Все должно зависеть от абстракций. Абстракции не должны зависеть от деталей, в свою очередь
    детали должны зависеть от абстракций.
    Пример:
    Высокоуровневый класс - springController
    У него есть методы которые взаимодействуют с базой данных, вытаскивая какую - то информацию
    если мы захотим изменить логику работы с базой, нам придется менять класс springController
    но если бы мы прописали интерфейс, в котором описаны методы, затем в условном классе service
    реализовали бы этот интерфейс, и внедрили бы его в springController,
    нам бы не пришлось менять springController, а только саму реализацию в service.